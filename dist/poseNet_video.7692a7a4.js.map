{"version":3,"sources":["poseNet_video.js"],"names":["canvas_height","canvas_width","video_path","video","poseNet","poses","setup","createCanvas","createVideo","vidLoad","size","width","height","ml5","modelReady","on","results","hide","select","html","loop","volume","draw","image","drawKeypoints","drawSkeleton","i","length","pose","j","keypoints","keypoint","score","fill","noStroke","ellipse","position","x","y","w","h","canvas","document","createElement","body","appendChild","skeleton","startPoint","endPoint","stroke","line","console","log"],"mappings":"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","file":"poseNet_video.7692a7a4.js","sourceRoot":"..","sourcesContent":["// Copyright (c) 2018 ml5\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\n/*\n Human pose detection using machine learning.\n This code uses: \n    ML5.js: giving us easy to use poseNet ML model.\n    P5.js: for drawing and creating video output in the browser.\n*/\n\n// ============= IMPORTANT ==============================\n// BELOW ARE THE VARIABLES TO CHANGE BASED ON YOUR VIDEO\nlet canvas_height = 720\nlet canvas_width = 1280\nlet video_path = 'mj_smooth_criminal.mp4'\n// ======================================================\n\n// variable for our video file\nlet video;\n// to store the ML model\nlet poseNet;\n// output of our ML model is stores in this\nlet poses = [];\n\n/* function setup() is by P5.js:\n      it is the first function that is executed and runs only once.\n      We will do our initial setup here.\n*/\nfunction setup() {\n\n  /* create a box in browser to show our output. Canvas having:\n         width: 640 pixels and\n         height: 480 pixels\n  */\n  createCanvas(canvas_width, canvas_height);\n  \n  // get video and call function vidLoad when video gets loaded\n  video = createVideo(video_path, vidLoad)\n  // set video to the same height and width of our canvas\n  video.size(width, height);\n\n  /* Create a new poseNet model. Input:\n      1) give our present video output\n      2) a function \"modelReady\" when the model is loaded and ready to use\n  */\n  poseNet = ml5.poseNet(video, modelReady);\n\n  /*\n    An event or trigger.\n    Images from the video is given to the poseNet model.\n    The moment pose is detected and output is ready it calls:\n    function(result): where result is the models output.\n    store this in poses variable for furthur use.\n  */\n  poseNet.on('pose', function(results) {\n    poses = results;\n  });\n\n /* Hide the video output for now.\n     We will modify the images and show with points and lines of the \n     poses detected later on.\n  */\n  video.hide();\n}\n\n/* function called when the model is ready to use.\n   set the #status field to Model Loaded for the\n  user to know we are ready to rock!\n */\nfunction modelReady() {\n  select('#status').html('Model and video loaded success');\n}\n\n/* This function is called when video loading is complete.\n we call loop function to start the video\n also set the volume to zero\n*/\n function vidLoad() {\n  video.loop();\n  video.volume(0);\n}\n\n/* function draw() is by P5.js:\n      This function is called on repeat forever (unless you plan on closing the browser\n      and/or pressing the power button)\n*/\nfunction draw() {\n\n  // show the image we currently have of the video output.\n  image(video, 0, 0, width, height);\n\n  // draw the points we have got from the poseNet model\n  drawKeypoints();\n  // draw the lines too.\n  drawSkeleton();\n}\n\n// A function to draw detected points on the image.\nfunction drawKeypoints(){\n  /*\n    Remember we saved all the result from the poseNet output in \"poses\" array.\n    Loop through every pose and draw keypoints\n   */\n  for (let i = 0; i < poses.length; i++) {\n    // For each pose detected, loop through all the keypoints\n    let pose = poses[i].pose;\n    for (let j = 0; j < pose.keypoints.length; j++) {\n      // A keypoint is an object describing a body part (like rightArm or leftShoulder)\n      let keypoint = pose.keypoints[j];\n      // Only draw an ellipse if the pose probability is bigger than 0.2\n      if (keypoint.score > 0.2) {\n        // choosing colour. RGB where each colour ranges from 0 255\n        fill(0, 0, 255);\n        // disable drawing outline\n        noStroke();\n        /* draw a small ellipse. Which being so small looks like a dot. Purpose complete.\n            input: X position of the point in the 2D image\n                   Y position as well\n                   width in px of the ellipse. 10 given\n                   height in px of the ellipse. 10 given\n        */\n        ellipse(keypoint.position.x, keypoint.position.y, 10, 10);\n      }\n    }\n  }\n}\n\nfunction createCanvas(w, h){\n  const canvas = document.createElement(\"canvas\"); \n  canvas.width  = w;\n  canvas.height = h;\n  document.body.appendChild(canvas);\n  return canvas;\n}\n\n// A function to draw the skeletons\nfunction drawSkeleton() {\n    /*\n    Remember we saved all the result from the poseNet output in \"poses\" array.\n    Loop through every pose and draw skeleton lines.\n   */\n  // Loop through all the skeletons detected\n  for (let i = 0; i < poses.length; i++) {\n    let skeleton = poses[i].skeleton;\n    // For every skeleton, loop through all body connections\n    for (let j = 0; j < skeleton.length; j++) {\n      // line start point\n      let startPoint = skeleton[j][0];\n      // line end point\n      let endPoint = skeleton[j][1];\n      // Sets the color used to draw lines and borders around shapes\n      stroke(0, 255, 0);\n      /* draw a line:\n            input: X position of start point of line in this 2D image\n                   Y position as well\n                   X position of end point of line in this 2D image\n                   Y position as well\n          */\n      line(startPoint.position.x, startPoint.position.y, endPoint.position.x, endPoint.position.y);\n    }\n  }\n}\nsetup();\nconsole.log('call js')"]}